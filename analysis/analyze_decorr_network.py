#!/usr/bin/env python

'''
Analysis of the spike data generated by ../networks/decorr_network.py
using the Elephant analysis toolkit.
'''

import numpy as np
import neo
import elephant
from quantities import ms
from optparse import OptionParser

# parse options
parser = OptionParser()
parser.add_option('--file', dest='filename', help='file name of spikes data')
(options, args) = parser.parse_args()
spikes = np.loadtxt(options.filename)

# analysis
runtime = 1000.0
uniqueIDs= np.unique(spikes[:,0])

spikeTrainList = []
cvList = []
meanRateList = []
print 'Extract spike trains'
for index in uniqueIDs: # iterate over neurons
    spikesNeuron = spikes[spikes[:,0] == index][:,1]
    neoSpikeTrain = neo.SpikeTrain(spikesNeuron, runtime, ms)
    spikeTrainList.append(neoSpikeTrain)

print 'Calculate coefficients of variation'
for spikeTrain in spikeTrainList:
    cvNeuron = elephant.statistics.cv(spikeTrain)
    cvList.append(cvNeuron)

print 'Calculate average firing rates'
for spikeTrain in spikeTrainList:
    meanRateNeuron = elephant.statistics.mean_firing_rate(spikeTrain, t_start=0, t_stop=runtime * ms)
    meanRateNeuron.units = '1/s'
    meanRateList.append(meanRateNeuron)

print 'Binning spike trains'
binnedSpikeTrainList = elephant.conversion.BinnedSpikeTrain(spikeTrainList, binsize=2.0*ms)
print 'Calculate correlation coefficients'
correlation = elephant.spike_train_correlation.corrcoef(binnedSpikeTrainList)
correlationList = correlation[np.triu_indices(len(correlation), 1)]

print 'Plotting data'
# for plotting without X-server
import matplotlib as mpl
mpl.use('Agg')

# visualize data
import matplotlib.pyplot as plt
fig = plt.figure()
fig.subplots_adjust(left=0.1, right=0.95, top=0.95, bottom=0.1, hspace=0.3)

# plot CV over average firing rate
ax = fig.add_subplot(211)
ax.plot(meanRateList, cvList, marker='o', ls='', c='b', mec='b')
ax.set_xlabel('Average firing rate (1/s)')
ax.set_ylabel('Coefficient of variation')

# plot histogram of correlation coefficients
ax = fig.add_subplot(212)
#xLim = [0, np.max(correlationList)]
xLim = [0, 0.3]
hist, edges = np.histogram(correlationList, bins=25, range=xLim)
hist = 1.0 * hist / len(correlationList) # calculate probability
ax.bar(edges[:-1], hist, width=abs(edges[1] - edges[0]), fc='b', ec='b', lw=0)
ax.set_xlim(xLim)
ax.set_xlabel('Correlation coefficient')
ax.set_ylabel('p')

plt.savefig('analysis_result.png')
